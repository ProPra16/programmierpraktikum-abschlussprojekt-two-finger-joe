catalogue {

	project "Example Roman Numerals" {

		instruction "Write a function to convert from normal numbers to Roman Numerals: e.g.";
		instruction " 1  => I // 10  => X //  7  => VII";

		test template "RomanNumbersTest1" {
		
		// Beispiel aus : http://exercism.io/exercises/java/roman-numerals/readme
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.junit.runners.Parameterized;
			import org.junit.runners.Parameterized.Parameters;
			
			import java.util.Arrays;
			import java.util.Collection;
			
			import static org.junit.Assert.assertEquals;
			
			@RunWith(Parameterized.class)
			public class RomanNumeralsTest {
				private int input;
				private String expectedOutput;
				
			@Parameters
			public static Collection<Object[]> data() {
			return Arrays.asList(new Object[][]{
				{0, ""},
                {1, "I"},
                {2, "II"},
                {3, "III"},
                {4, "IV"},
                {5, "V"},
                {6, "VI"},
                {9, "IX"},
                {27, "XXVII"},
                {48, "XLVIII"},
                {59, "LIX"},
                {93, "XCIII"},
                {141, "CXLI"},
                {163, "CLXIII"},
                {402, "CDII"},
                {575, "DLXXV"},
                {911, "CMXI"},
                {1024, "MXXIV"},
                {3000, "MMM"}
                });
            }
            
            public RomanNumeralsTest(int input, String expectedOutput) {
            this.input = input;
            this.expectedOutput = expectedOutput;
            }
            
            @Test
            public void convertArabicNumberalToRomanNumeral() {
            	RomanNumeral romanNumeral = new RomanNumeral(input);
            	assertEquals(expectedOutput, romanNumeral.getRomanNumeral());
            	}
            }
		}

		test template "RomanNumbersTest2" {
			import static org.junit.Assert.*;
			import org.junit.Test;

			public class RomanNumbersTest2 {

				@Test
				public void testSomething() {
				}
			}
		}

		implementation template "SomeClass1" {
		import java.util.HashMap;
		import java.util.Map;
		import java.util.NavigableMap;
		import java.util.TreeMap;
		
		public class RomanNumeral {
			private final int number;
			private static final Map<Integer, String> CACHE = new HashMap<>();
			private static final NavigableMap<Integer, String> NUMBER_TO_ROMAN = initMap();
			
		public RomanNumeral(int number) {
			if (number < 0 || number > 3000) {
			throw new IllegalArgumentException("Number out of range.");
			}
			this.number = number;
		}
		
		public String getRomanNumeral() {
			if (number == 0) {
				return "";
			}
			String result = CACHE.get(number);
			if (result != null) {
				return result;
			}
			result = toRomen(number);
			CACHE.put(number, result);
			
			return result;
    		//return number == 0 ? "" : toRomen(number);
    		}

  		private static String toRomen(int num) {
  		int floorNum = NUMBER_TO_ROMAN.floorKey(num);
  		// Base case 
  		if (floorNum == num) {
  			return NUMBER_TO_ROMAN.get(num);
  		}
  		return NUMBER_TO_ROMAN.get(floorNum) + toRomen(num - floorNum);
  		}

  		private static NavigableMap<Integer, String> initMap() {
    		NavigableMap<Integer, String> map = new TreeMap<>();
    		map.put(1, "I");
    		map.put(4, "IV");
    		map.put(5, "V");
    		map.put(9, "IX");
    		map.put(10, "X");
    		map.put(40, "XL");
    		map.put(50, "L");
    		map.put(90, "XC");
    		map.put(100, "C");
    		map.put(400, "CD");
    		map.put(500, "D");
    		map.put(900, "CM");
    		map.put(1000, "M");
    		return map;
    		}
    	}
		
		}

		implementation template "SomeClass2" {
			public class SomeClass2 {
			}
		}
	}

	project "Example Project2" {

		instruction "Blub";
		instruction "Bla";

		test template "RomanNumbersTest3" {
			import static org.junit.Assert.*;
			import org.junit.Test;

			public class RomanNumbersTest3 {

				@Test
				public void testSomething() {
				}
			}
		}

		test template "RomanNumbersTest4" {
			import static org.junit.Assert.*;
			import org.junit.Test;

			public class RomanNumbersTest4 {

				@Test
				public void testSomething() {
				}
			}
		}

		implementation template "SomeClass3" {
			public class SomeClass1 {
			}
		}

		implementation template "SomeClass4" {
			public class SomeClass2 {
			}
		}
	}
}
